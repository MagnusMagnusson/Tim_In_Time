<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xoff = 128;
yoff = 256;
xrow = 10;
w = 64;
h = w;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_consola);

if(mouse_check_button_pressed(mb_left)){
    for(var i = 0; i &lt; 5*LEVELS; i++){
        var xx,yy;
        xx = xoff +(w + 16)*(i % xrow);
        yy = yoff + (h + 16)*(i div xrow); 
    
        if(mouse_in_area(xx,yy,xx+w,yy+h) &amp;&amp; level_ctrl.won &gt;= i){
            var lstring = "lvl_";
            lstring += string(i+1);
            var rom;
            rom = asset_get_index(lstring){
                if(rom != -1){
                    audio_stop_all();
                    audio_play_sound(snd_memory,1,true);
                    instance_create(0,0,ctrl);
                    room_goto(rom);
                }
            }
        }
    }
}
draw_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_consola);
var selected = -1;
for(var i = 0; i &lt; LEVELS; i++){
    innerc = c_dkgray;
    outerc = c_gray;
    tc = c_white;
    
    var xx,yy;
    xx = xoff +(w + 16)*(i % xrow);
    yy = yoff + (h + 16)*(i div xrow); 
      
    var text;
    if(level_ctrl.won &gt;= i){
        text = i+1;
    }
    else{
        text = "??";
    }
    
    if(mouse_in_area(xx,yy,xx+w,yy+h) &amp;&amp; level_ctrl.won &gt;= i){
        innerc = c_gray;
        outerc = c_dkgray;
        tc = c_black;
        selected = i;
    }
    draw_set_color(outerc);
    draw_rectangle(xx-2,yy-2,xx+w+2,yy+h+2,false);
    draw_set_color(innerc);
    draw_rectangle(xx,yy,xx+w,yy+h,false);
    draw_set_color(c_white)
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);

    draw_text(xx + w/2, yy + h/2,text);
}

var time,energy,warps,stars;
time = 0;
energy = 0;
warps = 0;
stars = 0;
done = false;
if(selected &gt; -1){
    time = level_ctrl.stats[selected,STAT_TIME];
    energy = level_ctrl.stats[selected,STAT_ENERGY];
    warps = level_ctrl.stats[selected,STAT_WARPS];
    stars = level_ctrl.stats[selected,STAT_STARS];
    done = selected &lt; level_ctrl.won;
}

draw_set_font(fnt_consola);
draw_set_color(0);
var xloc = room_width div 2;
if(selected &gt; -1){
    if(done){
        var lstring;
        lstring = "lvl_";
        lstring += string(1+selected);
        var req;
        req = get_room_requirements(asset_get_index(lstring));
        draw_text(xloc,128,"Shortest Time: " +string(((-time + req[0]) / room_speed) div 60) + " Minutes "+string(((-time+ req[0]) / room_speed) % 60) + " Seconds ");
        draw_text(xloc,128 + 32,"Least Time Spent Warping: " +string((((-energy +req[1])*4) / room_speed)) + " Seconds ");
        draw_text(xloc,128 + 64,"Fewest Warps: " +string(-warps+ req[2]) + " Warps.");
        draw_sprite(s_star,0,xloc,32);
        var r,width,height;
        width = 320;
        height = 64;
        r = stars/5;
        draw_sprite_part(s_star,1,0,0,r * width,height,xloc - width/2, 32 - height/2);
    }
    else{        
        draw_sprite(s_star,0,xloc,32);
        draw_text(xloc,128,"Shortest Time: ???");
        draw_text(xloc,128 + 32,"Least Time Spent Warping: ???");
        draw_text(xloc,128 + 64,"Fewest Warps: ???");   
    }
}
else{
    draw_sprite(s_star,0,xloc,32);
}
draw_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
