<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clones = ds_list_create();
timestamps = ds_list_create();
current = ds_list_create();
warping = false;

init_current(noone);

worldtick = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tick world and count.
if(warping == 0){
    worldtick++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TimeWarp

// Start backwards warp.
if(keyboard_check_pressed(ord('Z')) &amp;&amp; warping == 0){
    time_warp();
    var i = instance_create(-999,-999,o_clone);
    i.ID = ds_list_size(clones)-1;
    i.controller = clones[|i.ID];
    i.mypath = o_player.mypath;
    o_player.mypath = ds_list_create();
    o_player.command = 0;
    init_current(i);
    while(worldtick % 4 != 0){
        worldtick++;
    }
}

if(warping != 0){ //We are warping to somewhere.
    worldtick += 4*warping;
    if(warping == -1 &amp;&amp; !keyboard_check(ord('Z'))){
    //Stop the warp process.
        warping = 0;
        worldtick++;
        o_player.birth = worldtick-1;
    }
    //Warp clones backwards
    if(warping == -1){
        with(o_clone){
            var length, xx, yy;
            length = ds_list_size(mypath);
            show_debug_message(string(length));
            if(length &gt;= 2){
                command = 2*mypath[|length - 1];
                vright = mypath[|length - 2];
                vleft = mypath[|length - 3];
                vdown = mypath[|length - 4];
                vup = mypath[|length - 5];
                hsped = mypath[|length - 6];
                vsped = mypath[|length - 7];
                y = mypath[|length - 8];
                x = mypath[|length -9];
                visible = true;
                
                for(var j = 1; j &lt; 10; j++){
                    ds_list_delete(mypath,length - j);
                }
                
                show_debug_message("warping!");
            }
            if(ctrl.worldtick &lt; death &amp;&amp; ctrl.worldtick + 4 &gt; death){
                repeat(100){
                    visible = true;
                    effect_create_above(ef_spark,x + irandom(64),  y + irandom(128),irandom(3),c_white)
                }  
            }
            if(ctrl.worldtick &lt; birth &amp;&amp; ctrl.worldtick + 4 &gt; birth){
                repeat(100){
                    visible = false;
                    effect_create_above(ef_spark,x + irandom(64), y + irandom(128),irandom(3),c_aqua)
                    effect_create_above(ef_star,x + irandom(64), y + irandom(128),irandom(3),c_white)
                }  
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(0,0,worldtick);
draw_text(0,32,ds_list_size(current));
draw_text(0,48,instance_number(o_clone));
for(var i = 0; i &lt; ds_list_size(current); i++){
    draw_text(0,64 + 32*i,current[|i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
